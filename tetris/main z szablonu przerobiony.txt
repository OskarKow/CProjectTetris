void Test()
{
	double x, y;
	int t1, t2, quit, frames, rc;
	double delta, worldTime, fpsTimer, fps, distance, etiSpeed;
	SDL_Event event;
	SDL_Surface *charset, *eti;
	okno_t Okno = { NULL, NULL, NULL, NULL };
	kolory_t Kolory;

	if(SDL_Init(SDL_INIT_EVERYTHING) != 0) {
		printf("SDL_Init error: %s\n", SDL_GetError());
		return;
		}

	Ustaw_okno(&Okno, &rc, WINDOW);
	// wczytanie grafiki, bedzie w dalszej funkcji
	Wczytaj_grafiki(&charset, "./cs8x8.bmp", &Okno);
	SDL_SetColorKey(charset, true, 0x000000);
	Wczytaj_grafiki(&eti, "./cyan.bmp", &Okno);
	
	char text[128];
	Ustaw_kolory(&Kolory, Okno);

	t1 = SDL_GetTicks();

	frames = 0;
	fpsTimer = 0;
	fps = 0;
	quit = 0;
	worldTime = 0;
	distance = 0;
	etiSpeed = 1;
	x = 100;
	//tu cala gra jest:
	while(!quit) {
		t2 = SDL_GetTicks();
		// w tym momencie t2-t1 to czas w milisekundach,
		// jaki uplyna³ od ostatniego narysowania ekranu
		// delta to ten sam czas w sekundach
		delta = (t2 - t1) * 0.001;
		t1 = t2;

		worldTime += delta;

		distance += etiSpeed * delta;

		SDL_FillRect(Okno.screen, NULL, Kolory.czarny);

		//latanie w kolko
		
		y = SCREEN_HEIGHT / 2 + cos(distance) * SCREEN_HEIGHT / 3;
		DrawSurface(Okno.screen, eti,x,y);
		            
		// tekst informacyjny
		DrawRectangle(Okno.screen, 4, 4, SCREEN_WIDTH - 8, 36, Kolory.czerwony, Kolory.niebieski);
		sprintf(text, "Esc - wyjscie, \030 - przyspieszenie, \031 - zwolnienie");
		DrawString(Okno.screen, Okno.screen->w / 2 - strlen(text) * 8 / 2, 10, text, charset);
		sprintf(text, "Pozycja X:%.1lf Pozycja Y: %.1lf", x, y);
		DrawString(Okno.screen, Okno.screen->w / 2 - strlen(text) * 8 / 2, 26, text, charset);

		SDL_UpdateTexture(Okno.scrtex, NULL, Okno.screen->pixels, Okno.screen->pitch);
		SDL_RenderCopy(Okno.renderer, Okno.scrtex, NULL, NULL);
		SDL_RenderPresent(Okno.renderer);

		// obs³uga zdarzeñ (o ile jakieœ zasz³y)
		while(SDL_PollEvent(&event)) {
			switch(event.type) {
				case SDL_KEYDOWN:
					if(event.key.keysym.sym == SDLK_ESCAPE) quit = 1;
					else if(event.key.keysym.sym == SDLK_UP) etiSpeed = 2.0;
					else if(event.key.keysym.sym == SDLK_DOWN) etiSpeed = 0.3;
					else if (event.key.keysym.sym == SDLK_LEFT) x -= etiSpeed;
					else if (event.key.keysym.sym == SDLK_RIGHT) x += 6;
					break;
				case SDL_KEYUP:
					etiSpeed = 1.0;
					break;
				case SDL_QUIT:
					quit = 1;
					break;
				};
			};
		frames++;
		}
}